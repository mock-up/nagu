use	nagu/texture.html#use,Texture,proc(BindedTexture)	texture: use(texture: var Texture; procedure: proc (texture: var BindedTexture))	
useVAO	nagu/texture.html#useVAO,BindedTexture,proc(BindedTexture,BindedVAO)	texture: useVAO(bindedTexture: var BindedTexture;\n       procedure: proc (texture: var BindedTexture; vao: var BindedVAO))	
useElem	nagu/texture.html#useElem,BindedTexture,proc(BindedTexture,BindedTextureElem)	texture: useElem(bindedTexture: var BindedTexture; procedure: proc (\n    texture: var BindedTexture; vbo: var BindedTextureElem))	
useQuad	nagu/texture.html#useQuad,BindedTexture,proc(BindedTexture,BindedTextureQuad)	texture: useQuad(bindedTexture: var BindedTexture; procedure: proc (\n    texture: var BindedTexture; vbo: var BindedTextureQuad))	
useUV	nagu/texture.html#useUV,BindedTexture,proc(BindedTexture,BindedTextureUV)	texture: useUV(bindedTexture: var BindedTexture;\n      procedure: proc (texture: var BindedTexture; vbo: var BindedTextureUV))	
useModelMatrix	nagu/texture.html#useModelMatrix,BindedTexture,proc(BindedTexture,array[,BindedModelMatrixVector[]])	texture: useModelMatrix(bindedTexture: var BindedTexture; procedure: proc (\n    texture: var BindedTexture; vbo: var array[4, BindedModelMatrixVector[16]]))	
useModelMatrixVector	nagu/texture.html#useModelMatrixVector,BindedTexture,range[],proc(BindedTexture,BindedModelMatrixVector[])	texture: useModelMatrixVector(bindedTexture: var BindedTexture; index: range[0 .. 3];\n    procedure: proc (texture: var BindedTexture;\n                     vbo: var BindedModelMatrixVector[16]))	
pixels=	nagu/texture.html#pixels=,BindedTexture,uint,uint,pointer	texture: pixels=(texture: var BindedTexture; width, height: uint; data: pointer)	
pixels=	nagu/texture.html#pixels=,BindedTexture,tuple[seq[uint8],int,int]	texture: pixels=(texture: var BindedTexture;\n        img: tuple[data: seq[uint8], width: int, height: int])	
pixels=	nagu/texture.html#pixels=,BindedTexture,array[H,array[W,array[,T]]]	texture: pixels=[W, H: static[int]; T](texture: var BindedTexture;\n                              data: array[H, array[W, array[4, T]]])	
draw	nagu/texture.html#draw,BindedTexture	texture: draw(texture: var BindedTexture)	
setModelMatrix	nagu/texture.html#setModelMatrix,BindedTexture,array[,float32]	texture: setModelMatrix(texture: var BindedTexture; matrix4v: array[16, float32])	
setModelMatrix	nagu/texture.html#setModelMatrix,BindedTexture,Mat4[float32]	texture: setModelMatrix(texture: var BindedTexture; matrix4v: Mat4[float32])	
make	nagu/texture.html#make,typedesc[Texture],Position,string,string	texture: make(_: typedesc[Texture]; position: Position = Position.init(0, 0, 0);\n     vertex_shader_path: string; fragment_shader_path: string): Texture	
