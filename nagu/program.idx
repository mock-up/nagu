pvkAttrib	nagu/program.html#pvkAttrib	ProgramVariableKind.pvkAttrib	
pvkUniform	nagu/program.html#pvkUniform	ProgramVariableKind.pvkUniform	
pvkSubroutineUniform	nagu/program.html#pvkSubroutineUniform	ProgramVariableKind.pvkSubroutineUniform	
ProgramVariableKind	nagu/program.html#ProgramVariableKind	program: ProgramVariableKind	
Program	nagu/program.html#Program	program: Program	
BindedProgram	nagu/program.html#BindedProgram	program: BindedProgram	
ProgramDefect	nagu/program.html#ProgramDefect	program: ProgramDefect	
ProgramCreationDefect	nagu/program.html#ProgramCreationDefect	program: ProgramCreationDefect	
ProgramLinkingDefect	nagu/program.html#ProgramLinkingDefect	program: ProgramLinkingDefect	
ProgramNotExistsActiveUniformDefect	nagu/program.html#ProgramNotExistsActiveUniformDefect	program: ProgramNotExistsActiveUniformDefect	
ProgramNotExistsActiveSubroutineUniformDefect	nagu/program.html#ProgramNotExistsActiveSubroutineUniformDefect	program: ProgramNotExistsActiveSubroutineUniformDefect	
mvpMatrix	nagu/program.html#mvpMatrix	program: mvpMatrix	
identityMatrix	nagu/program.html#identityMatrix	program: identityMatrix(): mvpMatrix	
init	nagu/program.html#init,typedesc[Program]	program: init(_: typedesc[Program]): Program	
id	nagu/program.html#id	program: id(program: Program | BindedProgram): opengl.GLuint	
linked	nagu/program.html#linked	program: linked(program: Program | BindedProgram): bool	
index	nagu/program.html#index,,string	program: index(program: Program | BindedProgram; name: string): int	
attach	nagu/program.html#attach,,ShaderObject	program: attach(program: Program | var BindedProgram; shader: ShaderObject)	
log	nagu/program.html#log	program: log(program: var Program | var BindedProgram): string	
`bind`	nagu/program.html#bind,Program	program: `bind`(program: var Program): BindedProgram	
unbind	nagu/program.html#unbind,BindedProgram	program: unbind(program: var BindedProgram): Program	
use	nagu/program.html#use,Program,proc(BindedProgram)	program: use(program: var Program; procedure: proc (program: var BindedProgram))	
link	nagu/program.html#link	program: link(program: var Program | var BindedProgram)	
registerAttrib	nagu/program.html#registerAttrib,,string	program: registerAttrib(program: var Program | var BindedProgram; name: string)	
registerUniform	nagu/program.html#registerUniform,,string	program: registerUniform(program: var Program | var BindedProgram; name: string)	
registerSubroutineUniform	nagu/program.html#registerSubroutineUniform,,ShaderObjectKind,string	program: registerSubroutineUniform(program: var Program | var BindedProgram;\n                          shaderType: ShaderObjectKind; name: string)	
make	nagu/program.html#make,typedesc[Program],ShaderObject,ShaderObject	program: make(_: typedesc[Program]; vertex_shader: ShaderObject;\n     fragment_shader: ShaderObject): Program	
make	nagu/program.html#make,typedesc[Program],ShaderObject,ShaderObject,seq[string],seq[string],seq[]	program: make(_: typedesc[Program]; vertex_shader: ShaderObject;\n     fragment_shader: ShaderObject; attributes: seq[string] = @[];\n     uniforms: seq[string] = @[];\n     subroutine_uniforms: seq[(ShaderObjectKind, string)] = @[]): Program	
`[]`	nagu/program.html#[],,string	program: `[]`(program: Program | BindedProgram; name: string): int	
`[]=`	nagu/program.html#[]=,,string,int	program: `[]=`(program: Program | BindedProgram; name: string; v1: int)	
`[]=`	nagu/program.html#[]=,,string,array[,float32]	program: `[]=`(program: Program | BindedProgram; name: string;\n      matrix4v: array[16, float32])	
`[]=`	nagu/program.html#[]=,,string,tuple[BindedVBO[I,T],int]	program: `[]=`[I: static int; T](program: Program | BindedProgram; name: string;\n                        data: tuple[vbo: BindedVBO[I, T], size: int])	
